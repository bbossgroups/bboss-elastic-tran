configure(allprojects) { project ->
	group = PROJ_GROUP
	version = PROJ_VERSION

	apply plugin: "java"
	apply plugin: "maven-publish"
	apply plugin: "eclipse"
	apply plugin: "idea"
	apply plugin: "signing"
	apply plugin: "java-library"
//	apply plugin: "maven"
	eclipse {
		jdt {
			//if you want to alter the java versions (by default they are configured with gradle java plugin settings):
			sourceCompatibility = SOURCE_COMPILER_LEVEL
			targetCompatibility = TARGET_COMPILER_LEVEL
			//javaRuntimeName = "../../org.eclipse.jdt.launching.JRE_CONTAINER"

		}
	}


	tasks.withType(JavaCompile) {
		
		sourceCompatibility = SOURCE_COMPILER_LEVEL
		targetCompatibility = TARGET_COMPILER_LEVEL
		options.encoding = 'UTF-8'
	}

	tasks.withType(Javadoc) {
		sourceCompatibility = JAVADOC_SOURCE_LEVEL
		targetCompatibility = JAVADOC_COMPILER_LEVEL
		options.encoding = 'UTF-8'
		// disable the crazy super-strict doclint tool in Java 8
        // noinspection SpellCheckingInspection
		if (JavaVersion.current().isJava8Compatible()) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}

	jar {
		manifest {
			attributes (
					'Implementation': archiveVersion,
					'Specification-Version': archiveVersion,
					'Implementation-Vendor': 'bbossgroups',
					'Implementation-ProductID': project.name,
					'Compile-Timestamp': new Date().format('yyyy-MM-dd HH:mm:ss'),
					'Compile-User': DEVELOPER_NAME
			)
		}
	}


	dependencies {
		testImplementation 'junit:junit:4.13.1'
	}

	repositories {
		mavenLocal()
		maven {
			url "https://maven.aliyun.com/nexus/content/groups/public"
		}
		mavenCentral()
		
	}
	if(project.getProperty('skipTest').equals("true"))
	{
		compileTestJava.enabled=false
		processTestResources.enabled=false
		testClasses.enabled = false
		test.enabled = false  
	}
}

 
configure(subprojects) { subproject ->
	task sourcesJar(type: Jar) {
		archiveClassifier = "sources"
		from sourceSets.main.allJava
		duplicatesStrategy = DuplicatesStrategy.INCLUDE
	}
	
	task javaDocJar(type: Jar, dependsOn: javadoc) {
		archiveClassifier = "javadoc"
		from javadoc.destinationDir
	}
	artifacts {
	    archives sourcesJar, javaDocJar
	}

}
//,project(":bboss-elasticsearch-rest-file")
configure([project(":bboss-datatran-jdbc"),project(":bboss-elasticsearch-rest-jdbc"),project(":bboss-datatran-geoip"),project(":bboss-datatran-metrics"),
		   project(":bboss-elasticsearch-rest-mongodb"),
		   project(":bboss-datatran-kafka"),
		   project(":bboss-datatran-kafka1x"),
		   project(":bboss-datatran-kafka2x"),
		   project(":bboss-elasticsearch-rest-kafka1x"),
		   project(":bboss-elasticsearch-rest-kafka2x"),
		   project(":bboss-elasticsearch-rest-hbase"),
		   project(":bboss-elasticsearch-rest-file2ftp"),
		   project(":bboss-elasticsearch-rest-file"),
		   project(":bboss-datatran-core"),
		   project(":bboss-datatran-fileftp"),
		   project(":bboss-datatran-hbase"),
		   project(":bboss-datatran-mongodb"),
		   project(":bboss-datatran-schedule-quartz"),
		   project(":bboss-datatran-schedule-xxljob"),
		   project(":bboss-datatran-binlog")

]) { subproject ->


//	uploadArchives {
//		  repositories {
//
//			    mavenDeployer {
//
//			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
//	     	repository(url: sonatype_url) {
//
//			         authentication(userName: sonatype_username, password: sonatype_password)
//			}
//
//
//
//
//		      pom.project {
//		        name project.name
//		        packaging 'jar'
//		        // optionally artifactId can be defined here
//		        description PROJ_DESCRIPTION
//		        url PROJ_WEBSITEURL
//
//		        scm {
//		          connection scm_connection
//		          developerConnection scm_developerConnection
//		          url scm_url
//		        }
//
//		        licenses {
//		          license {
//		            name PROJ_LICENCE_NAME
//		            url PROJ_LICENCE_URL
//		          }
//		        }
//
//		        developers {
//		          developer {
//		            id DEVELOPER_ID
//		            name DEVELOPER_NAME
//		            email DEVELOPER_EMAIL
//		          }
//		        }
//		      }
//		    }
//		  }
//		}
		
//		publishing {
//			publications {
//				mavenJava(MavenPublication) {
//
//					from components.java
//
//					artifact sourcesJar
//					artifact javaDocJar
//
//				}
//			}
//			repositories {
//		        /**maven {
//		            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
//		            credentials {
//		                username ""
//		                password ""
//		            }
//		        }*/
//		        mavenLocal()
//				repository(url: sonatype_url) {
//
//					authentication(userName: sonatype_username, password: sonatype_password)
//				}
//		    }
//
//		}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				groupId project.group
				artifactId project.name
				version "${version}"
				from components.java
				artifact sourcesJar
				artifact javaDocJar
//				versionMapping {
//					usage('java-api') {
//						fromResolutionOf('runtimeClasspath')
//					}
//					usage('java-runtime') {
//						fromResolutionResult()
//					}
//				}
//				from components.java
				pom {
					name = project.name
					packaging = 'jar'
					// optionally artifactId can be defined here
					description = PROJ_DESCRIPTION
					url = PROJ_WEBSITEURL

					scm {
						connection = scm_connection
						developerConnection = scm_developerConnection
						url = scm_url
					}

					licenses {
						license {
							name = PROJ_LICENCE_NAME
							url = PROJ_LICENCE_URL
						}
					}

					developers {
						developer {
							id = DEVELOPER_ID
							name = DEVELOPER_NAME
							email = DEVELOPER_EMAIL
						}
					}

				}
			}
		}
		repositories {
//			maven {
//				// change URLs to point to your repos, e.g. http://my.org/repo
//				def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
//				def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
//				url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
//			}
			maven {
				// change URLs to point to your repos, e.g. http://my.org/repo
				allowInsecureProtocol=true
				url = sonatype_url
				credentials {
					             username = sonatype_username
							            password = sonatype_password
				}

			}

		}
	}

	signing {
		sign publishing.publications.mavenJava
//		sign configurations.archives
	}
	//	ext.uploadtocenter=uploadArchivesToMavenCenter.equals("true")
//	if(uploadtocenter)
//	{
//		signing {
//			//required { uploadtocenter }
//			sign configurations.archives
//		}
//	}


}

