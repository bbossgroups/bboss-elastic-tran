<properties>
	<!-- 增加mongodb数据源配置和client工厂类 -->
	<property name="default" factory-class="org.frameworkset.nosql.mongodb.MongoDB"
		init-method="init" destroy-method="close" factory-method="getMongoClient">
		
		<!-- 这里不需要配置destroy-method，因为bboss持久层在jvm退出时会自动调用数据源的close方法 -->
		<property name="serverAddresses" >
			10.0.15.134:27017
			10.0.15.134:27018
			10.0.15.38:27017
			10.0.15.39:27017
		</property>
		<property name="option" >
			QUERYOPTION_SLAVEOK
		</property>
			
		<property name="writeConcern" value="JOURNAL_SAFE"/>
		<property name="readPreference" value="NEAREST"/>		
		<property name="autoConnectRetry" value="true"/>		
		<property name="connectionsPerHost" value="50"/>	
		<property name="maxWaitTime" value="120000"/>	
		<property name="socketTimeout" value="0"/>	
		<property name="connectTimeout" value="15000"/>	
		<property name="threadsAllowedToBlockForConnectionMultiplier" value="5"/>	
		<property name="socketKeepAlive" value="true"/>
		<!-- 如果需要用户认证则在下面配置mongodb的数据库验证用户和口令以及机制 -->	
		<!-- mechanism 取值范围：PLAIN GSSAPI MONGODB-CR MONGODB-X509，默认为MONGODB-CR  -->
		<!--<property name="credentials">
		    <list componentType="bean"> 
		       
				<property class="org.frameworkset.nosql.mongodb.ClientMongoCredential"
				    f:mechanism="PLAIN"
				    f:database="sessiondb"
				    f:userName="bboss"				    
				    f:password="bboss"/> 
				<property class="org.frameworkset.nosql.mongodb.ClientMongoCredential"
				    f:mechanism="PLAIN"
				    f:database="tokendb"
				    f:userName="bboss"				    
				    f:password="bboss"/> 
				 
			</list>
		</property> -->
	</property>
	<property name="mongodb" class="org.frameworkset.nosql.mongodb.MongoDB"
		init-method="init" destroy-method="close">
		
		<!-- 这里不需要配置destroy-method，因为bboss持久层在jvm退出时会自动调用数据源的close方法 -->
		<property name="serverAddresses" >
			10.0.15.134:27017
			10.0.15.134:27018
			10.0.15.38:27017
			10.0.15.39:27017			
		</property>
		<!-- 
		
		


    //  network protocol options

    /**
     * Tailable means cursor is not closed when the last data is retrieved.
     * Rather, the cursor marks the final object's position.
     * You can resume using the cursor later, from where it was located, if more data were received.
     * Like any "latent cursor", the cursor may become invalid at some point (CursorNotFound) – for example if the final object it references were deleted.
     */
    public static final int QUERYOPTION_TAILABLE = 1 << 1;
    /**
     * When turned on, read queries will be directed to slave servers instead of the primary server.
     */
    public static final int QUERYOPTION_SLAVEOK = 1 << 2;
    /**
     * Internal replication use only - driver should not set
     */
    public static final int QUERYOPTION_OPLOGREPLAY = 1 << 3;
    /**
     * The server normally times out idle cursors after an inactivity period (10 minutes) to prevent excess memory use.
     * Set this option to prevent that.
     */
    public static final int QUERYOPTION_NOTIMEOUT = 1 << 4;

    /**
     * Use with TailableCursor.
     * If we are at the end of the data, block for a while rather than returning no data.
     * After a timeout period, we do return as normal.
     */
    public static final int QUERYOPTION_AWAITDATA = 1 << 5;

    /**
     * Stream the data down full blast in multiple "more" packages, on the assumption that the client will fully read all data queried.
     * Faster when you are pulling a lot of data and know you want to pull it all down.
     * Note: the client is not allowed to not read all the data unless it closes the connection.
     */
    public static final int QUERYOPTION_EXHAUST = 1 << 6;

    /**
     * Use with sharding (mongos).
     * Allows partial results from a sharded system if any shards are down/missing from the cluster. If not used an error will be returned
     * from the mongos server.
     */
    public static final int QUERYOPTION_PARTIAL = 1 << 7;

    /**
     * Set when getMore is called but the cursor id is not valid at the server.
     * Returned with zero results.
     */
    public static final int RESULTFLAG_CURSORNOTFOUND = 1;
    /**
     * Set when query failed.
     * Results consist of one document containing an "$err" field describing the failure.
     */
    public static final int RESULTFLAG_ERRSET = 2;
    /**
     * Drivers should ignore this.
     * Only mongos will ever see this set, in which case, it needs to update config from the server.
     */
    public static final int RESULTFLAG_SHARDCONFIGSTALE = 4;
    /**
     * Set when the server supports the AwaitData Query option.
     * If it doesn't, a client should sleep a little between getMore's of a Tailable cursor.
     * Mongod version 1.6 supports AwaitData and thus always sets AwaitCapable.
     */
    public static final int RESULTFLAG_AWAITCAPABLE = 8; -->
		<property name="option" >
			QUERYOPTION_SLAVEOK
		</property>
			
		<!-- 
		
		 /** No exceptions are raised, even for network issues */
    public final static WriteConcern NONE = new WriteConcern(-1);

    /** Exceptions are raised for network issues, but not server errors */
    public final static WriteConcern NORMAL = new WriteConcern(0);

    /** Exceptions are raised for network issues, and server errors; waits on a server for the write operation */
    public final static WriteConcern SAFE = new WriteConcern(1);

    /** Exceptions are raised for network issues, and server errors; waits on a majority of servers for the write operation */
    public final static WriteConcern MAJORITY = new Majority();

    /** Exceptions are raised for network issues, and server errors; the write operation waits for the server to flush the data to disk*/
    public final static WriteConcern FSYNC_SAFE = new WriteConcern(true);

    /** Exceptions are raised for network issues, and server errors; the write operation waits for the server to group commit to the journal file on disk*/
    public final static WriteConcern JOURNAL_SAFE = new WriteConcern( 1, 0, false, true );

    /** Exceptions are raised for network issues, and server errors; waits for at least 2 servers for the write operation*/
    public final static WriteConcern REPLICAS_SAFE = new WriteConcern(2);
		-->
		<property name="writeConcern" value="JOURNAL_SAFE"/>
		<!-- 
		
	private static final ReadPreference PRIMARY:Preference to read from primary only.
      Cannot be combined with tags.
    private static final ReadPreference SECONDARY:Read from secondary
    private static final ReadPreference SECONDARY_PREFERRED:Read from secondary if available, otherwise from primary, irrespective of tags.
    private static final ReadPreference PRIMARY_PREFERRED:which reads primary if available
    private static final ReadPreference NEAREST:Read from nearest node respective of tags.
		-->
		<property name="readPreference" value="NEAREST"/>		
		
		
	</property>
</properties>